(()=>{"use strict";let t=JSON.parse(localStorage.getItem("tasks"))??[{id:1,description:"wash the dishes",completed:!1},{id:2,description:"Complete the to-do list project",completed:!1},{id:3,description:"take a rest",completed:!0}];const e={getTasks:()=>t,setTasks(e){t=e,localStorage.setItem("tasks",JSON.stringify(t))}};let n=e.getTasks();function s(){return e.setTasks(n),n=e.getTasks(),n}const i=document.getElementById("tasks-container");function c(){const t=s();i.innerHTML="",t.forEach(((t,d)=>{const o=document.createElement("li"),a=document.createElement("input"),l=document.createElement("input"),r=document.createElement("input");a.setAttribute("type","checkbox"),a.setAttribute("tabindex","0"),a.setAttribute("alt","Check!"),a.checked=t.completed,l.setAttribute("maxlength","255"),l.value=t.description,Object.entries({type:"button",tabindex:"-1",value:"",title:"click and sostain for rearrange",class:"input-btn-dots"}).forEach((([t,e])=>{r.setAttribute(t,e)})),o.appendChild(a),o.appendChild(l),o.appendChild(r),i.appendChild(o),l.addEventListener("input",(()=>{!function(t,i){n=e.getTasks();const c=n.find((e=>e.id===t));c&&(c.description=i,s())}(d+1,l.value)})),a.addEventListener("change",(()=>{!function(t){n=e.getTasks();const i=n.find((e=>e.id===t));i.completed=!i.completed,s()}(d+1),c()})),r.addEventListener("click",(()=>{!function(t){n=e.getTasks();const i=n.findIndex((e=>e.id===t));-1!==i&&(n.splice(i,1),n.forEach(((t,e)=>{t.id=e+1})),s())}(d+1),c()}))}))}document.getElementById("clear-btn").addEventListener("click",(()=>{(()=>{const t=n.filter((t=>!1===t.completed));t.forEach(((t,e)=>{t.id=e+1})),n=t,e.setTasks(t),n=e.getTasks(),s()})(),c()}));const d=document.getElementById("input-list");document.getElementById("form-input").addEventListener("submit",(()=>{const t=d.value;""!==t&&(function(t){n=e.getTasks();const i={id:n.length+1,description:t,completed:!1};n.push(i),s()}(t),d.value="",c())})),c()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,